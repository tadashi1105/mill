/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $site-grid-gutter-width) {
	margin-left: auto;
	margin-right: auto;
	@include rem(padding-left, ($gutter / 2));
	@include rem(padding-right, ($gutter / 2));
	@if not $site-enable-flex {
		@include clearfix();
	}
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $site-container-max-widths) {
	@each $breakpoint, $site-container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint) {
			max-width: $site-container-max-width;
		}
	}
}

@mixin make-row($gutter: $site-grid-gutter-width) {
	@if $site-enable-flex {
		display: flex;
		flex-wrap: wrap;
	} @else {
		@include clearfix();
	}
	@include rem(margin-left, ($gutter / -2));
	@include rem(margin-right, ($gutter / -2));
}

@mixin make-col($gutter: $site-grid-gutter-width) {
	position: relative;
	@if not $site-enable-flex {
		float: left;
	}
	min-height: 1px;
	@include rem(padding-left, ($gutter / 2));
	@include rem(padding-right, ($gutter / 2));
}

@mixin make-col-span($size, $columns: $site-grid-columns) {
	@if $site-enable-flex {
		flex: 0 0 percentage($size / $columns);
	} @else {
		width: percentage($size / $columns);
	}
}

@mixin make-col-offset($size, $columns: $site-grid-columns) {
	margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $site-grid-columns) {
	left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $site-grid-columns) {
	right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
	// Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
	@if $type == push {
		@include make-col-push($size, $columns);
	} @else if $type == pull {
		@include make-col-pull($size, $columns);
	} @else if $type == offset {
		@include make-col-offset($size, $columns);
	}
}
